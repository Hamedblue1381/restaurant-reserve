{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth/register": {
            "post": {
                "description": "Creates a new user account with the provided details. Upon successful creation, the user can log in with their credentials.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Register Credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.RegisterDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Confirmation of successful registration.",
                        "schema": {
                            "$ref": "#/definitions/api.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "The request was formatted incorrectly or missing required fields.",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error, unable to process the request.",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "description": "Authenticates a user by their email and password, returning a JWT token for authorized access to protected endpoints if successful.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.LoginDetails"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An object containing a JWT token for authentication and a message indicating successful login.",
                        "schema": {
                            "$ref": "#/definitions/api.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "The request was formatted incorrectly or missing required fields.",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Authentication failed due to invalid login credentials.",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "The specified user was not found in the system.",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error, unable to process the request.",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/food": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves a list of all foods in the system.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "food"
                ],
                "summary": "Get All Foods",
                "responses": {
                    "200": {
                        "description": "An array of food objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Food"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error while fetching foods.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Adds a new Food to the system with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "food"
                ],
                "summary": "Create a New Food",
                "parameters": [
                    {
                        "description": "Food Details",
                        "name": "food",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Food"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created Food's details, including their unique identifier.",
                        "schema": {
                            "$ref": "#/definitions/models.Food"
                        }
                    },
                    "400": {
                        "description": "Invalid input format for Food.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while creating the food.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/food/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves details of a single food dish by their unique identifier.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "food"
                ],
                "summary": "Get a Single food Dish",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "food ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the food including ID, name, quantity, category, mealtype.",
                        "schema": {
                            "$ref": "#/definitions/models.Food"
                        }
                    },
                    "400": {
                        "description": "Invalid food ID format.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Food not found with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the details of an existing food identified by their ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "food"
                ],
                "summary": "Update a food",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Food ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated food Details",
                        "name": "food",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Food"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated food's details.",
                        "schema": {
                            "$ref": "#/definitions/models.Food"
                        }
                    },
                    "400": {
                        "description": "Invalid input format for user details or invalid food ID.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while updating the food.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Removes a food dish from the system by their unique identifier.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "food"
                ],
                "summary": "Delete a food",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "food ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Food successfully deleted, no content to return."
                    },
                    "400": {
                        "description": "Invalid food ID format.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while deleting the food.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves the details of the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get my profile",
                "responses": {
                    "200": {
                        "description": "The details of the currently authenticated user.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/me/qr": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves the QR Code of the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get my profile QR CODE",
                "responses": {
                    "200": {
                        "description": "The QR CODE of the currently authenticated user.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/mealtype": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Adds a new MealType to the system with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mealtype"
                ],
                "summary": "Create a New MealType",
                "parameters": [
                    {
                        "description": "MealType Details",
                        "name": "mealtype",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MealType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created MealType's details, including their unique identifier.",
                        "schema": {
                            "$ref": "#/definitions/models.MealType"
                        }
                    },
                    "400": {
                        "description": "Invalid input format for MealType.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while creating the mealtype.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/mealtype/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves details of a single mealtype dish by their unique identifier.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mealtype"
                ],
                "summary": "Get a Single mealtype Dish",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "mealtype ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the mealtype including ID, name, quantity, category, mealtype.",
                        "schema": {
                            "$ref": "#/definitions/models.MealType"
                        }
                    },
                    "400": {
                        "description": "Invalid mealtype ID format.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "MealType not found with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the details of an existing mealtype identified by their ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mealtype"
                ],
                "summary": "Update a mealtype",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "MealType ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated mealtype Details",
                        "name": "mealtype",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.MealType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated mealtype's details.",
                        "schema": {
                            "$ref": "#/definitions/models.MealType"
                        }
                    },
                    "400": {
                        "description": "Invalid input format for user details or invalid mealtype ID.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while updating the mealtype.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Removes a mealtype dish from the system by their unique identifier.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mealtype"
                ],
                "summary": "Delete a mealtype",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "mealtype ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "MealType successfully deleted, no content to return."
                    },
                    "400": {
                        "description": "Invalid mealtype ID format.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while deleting the mealtype.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/mealtypes": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves a list of all mealtypes in the system.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "mealtype"
                ],
                "summary": "Get All MealTypes",
                "responses": {
                    "200": {
                        "description": "An array of mealtype objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.MealType"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error while fetching mealtypes.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reservation": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new reservation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "Create a reservation",
                "parameters": [
                    {
                        "description": "Reservation details",
                        "name": "reservation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created reservation's date",
                        "schema": {
                            "$ref": "#/definitions/v1.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User must be logged in to update a reservation",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reservation/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve details of a single reservation by its unique identifier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "Get a single reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The reservation details",
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    },
                    "400": {
                        "description": "Invalid reservation ID format",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User must be logged in to update a reservation",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Reservation not found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing reservation by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "Update a reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reservation details",
                        "name": "reservation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated reservation",
                        "schema": {
                            "$ref": "#/definitions/models.Reservation"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User must be logged in to update a reservation",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Reservation not found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a reservation by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "Delete a reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid reservation ID format",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User must be logged in to update a reservation",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Reservation not found",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reservations": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "List reservations based on provided start and end dates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "get reservations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (format: yyyy-mm-dd)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date (format: yyyy-mm-dd)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of reservations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Reservation"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid date format",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User must be logged in to update a reservation",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sides": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves a list of all side dishes in the system.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sides"
                ],
                "summary": "Get All Sides",
                "responses": {
                    "200": {
                        "description": "An array of sides objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Sides"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error while fetching sides.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Adds a new side dish to the system with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sides"
                ],
                "summary": "Create a New Sides",
                "parameters": [
                    {
                        "description": "Sides Details",
                        "name": "sides",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Sides"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created Side's details, including their unique identifier.",
                        "schema": {
                            "$ref": "#/definitions/models.Sides"
                        }
                    },
                    "400": {
                        "description": "Invalid input format for Sides.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while creating the sides.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sides/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves details of a single side dish by their unique identifier.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sides"
                ],
                "summary": "Get a Single Side Dish",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Sides ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the sides including ID, name, quantity.",
                        "schema": {
                            "$ref": "#/definitions/models.Sides"
                        }
                    },
                    "400": {
                        "description": "Invalid sides ID format.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Sides not found with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the details of an existing side dish identified by their ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sides"
                ],
                "summary": "Update a Side Dish",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Side ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Sides Details",
                        "name": "sides",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Sides"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated side's details.",
                        "schema": {
                            "$ref": "#/definitions/models.Sides"
                        }
                    },
                    "400": {
                        "description": "Invalid input format for user details or invalid sides ID.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while updating the sides.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Removes a side dish from the system by their unique identifier.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sides"
                ],
                "summary": "Delete a Side Dish",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Sides ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Side Dish successfully deleted, no content to return."
                    },
                    "400": {
                        "description": "Invalid sides ID format.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while deleting the sides.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves a list of all users in the system.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get All Users",
                "responses": {
                    "200": {
                        "description": "An array of user objects.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error while fetching users.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Adds a new user to the system with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a New User",
                "parameters": [
                    {
                        "description": "User Registration Details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created user's details, including their unique identifier.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input format for user details.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while creating the user.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves details of a single user by their unique identifier.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get a Single User",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The details of the user including ID, name, email, telephone, and role.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found with the specified ID.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the details of an existing user identified by their ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update a User",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated User Details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated user's details.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Invalid input format for user details or invalid user ID.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while updating the user.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Removes a user from the system by their unique identifier.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete a User",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User successfully deleted, no content to return."
                    },
                    "400": {
                        "description": "Invalid user ID format.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while deleting the user.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userId}/reservations": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves a list of reservations associated with a specific user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reservation"
                ],
                "summary": "Get User's Reservations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of reservation objects for the user.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Reservation"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Reservations not found for the specified user ID.",
                        "schema": {
                            "$ref": "#/definitions/v1.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Error message"
                }
            }
        },
        "api.LoginDetails": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Telephone string `json:\"telephone\" example:\"09211212121\"`",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "api.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Login successful"
                },
                "token": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "api.RegisterDetails": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "securePassword123"
                },
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "telephone": {
                    "type": "string",
                    "example": "123-456-7890"
                }
            }
        },
        "api.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User registered successfully"
                }
            }
        },
        "models.Category": {
            "type": "object",
            "properties": {
                "foods": {
                    "description": "Foods relationship",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Food"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Food": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "Category relationship",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Category"
                        }
                    ]
                },
                "categoryID": {
                    "description": "Foreign key for Category",
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "mealTypeID": {
                    "description": "Foreign key for MealType",
                    "type": "integer"
                },
                "meal_type": {
                    "description": "MealType relationship",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MealType"
                        }
                    ]
                },
                "name": {
                    "type": "string"
                },
                "quanity": {
                    "type": "string"
                },
                "reservations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Reservation"
                    }
                }
            }
        },
        "models.MealType": {
            "type": "object",
            "properties": {
                "foods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Food"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Reservation": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "food": {
                    "description": "Food relationship",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Food"
                        }
                    ]
                },
                "foodID": {
                    "description": "Foreign key for Food",
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "side": {
                    "description": "Sides relationship",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Sides"
                        }
                    ]
                },
                "sideID": {
                    "description": "Foreign key for Sides",
                    "type": "integer"
                },
                "user": {
                    "description": "User relationship",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "userID": {
                    "description": "Foreign key for User",
                    "type": "integer"
                }
            }
        },
        "models.Sides": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "string"
                },
                "reservations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Reservation"
                    }
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "reservations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Reservation"
                    }
                },
                "role": {
                    "type": "string"
                },
                "telephone": {
                    "type": "string"
                }
            }
        },
        "v1.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Description of the error occurred"
                }
            }
        },
        "v1.SuccessResponse": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}